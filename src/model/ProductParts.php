<?php

namespace Ledc\DeliverySlotBooking\model;

use think\Collection;
use think\db\exception\DataNotFoundException;
use think\db\exception\DbException;
use think\db\exception\ModelNotFoundException;
use think\db\Query;
use think\Model;
use think\model\relation\HasMany;

/**
 * 商品配件
 * @property int $parts_id 主键
 * @property string $title 配件名称
 * @property int $multiple 多选
 * @property int $multiple_min 最少选择数
 * @property string $create_time 创建时间
 * @property string $update_time 更新时间
 */
class ProductParts extends Model
{
    /**
     * 模型名称
     * @var string
     */
    protected $name = 'store_product_parts';

    /**
     * 数据表主键 复合主键使用数组定义
     * @var string|array
     */
    protected $pk = 'parts_id';

    /**
     * 商品表内配件字段名称
     */
    public const PRODUCT_FIELD = 'parts_ids';
    /**
     * 购物车表内配件列表字段名称
     */

    public const CART_PARTS_LIST = 'parts_list';
    /**
     * 购物车表内配件哈希字段名称
     */
    public const CART_PARTS_MD5 = 'parts_md5';

    /**
     * 关联预载入
     * @return array
     */
    public static function withParts(): array
    {
        return ['parts' => function(Query $query) {
            $query->order('sort', 'desc');
        }];
    }

    /**
     * 一对多关联
     * @return HasMany
     */
    public function parts(): HasMany
    {
        return $this->hasMany(ProductPartsValue::class, 'parts_id', 'parts_id');
    }

    /**
     * @param array $ids
     * @return Collection
     * @throws DataNotFoundException
     * @throws DbException
     * @throws ModelNotFoundException
     */
    public static function getList(array $ids = []): Collection
    {
        if ($ids) {
            $query = static::with(static::withParts())->whereIn('parts_id', $ids);
        } else {
            $query = static::with(static::withParts());
        }

        return $query->select();
    }

    /**
     * 【模型事件】查询后
     * @param self $model
     * @return void
     */
    public static function onAfterRead(self $model): void
    {
        // TODO: Change the autogenerated stub
    }

    /**
     * 【模型事件】新增前
     * @param self $model
     * @return bool|null
     */
    public static function onBeforeInsert(self $model): ?bool
    {
        // TODO: Change the autogenerated stub
        return true;
    }

    /**
     * 【模型事件】新增后
     * @param self $model
     * @return void
     */
    public static function onAfterInsert(self $model): void
    {
        // TODO: Change the autogenerated stub
    }

    /**
     * 【模型事件】更新前
     * @param self $model
     * @return bool|null
     */
    public static function onBeforeUpdate(self $model): ?bool
    {
        // TODO: Change the autogenerated stub
        return true;
    }

    /**
     * 【模型事件】更新后
     * @param self $model
     * @return void
     */
    public static function onAfterUpdate(self $model): void
    {
        // TODO: Change the autogenerated stub
    }

    /**
     * 【模型事件】删除前
     * @param self $model
     * @return bool|null
     */
    public static function onBeforeDelete(self $model): ?bool
    {
        // TODO: Change the autogenerated stub
        return true;
    }

    /**
     * 【模型事件】删除后
     * @param self $model
     * @return void
     */
    public static function onAfterDelete(self $model): void
    {
        // TODO: Change the autogenerated stub
    }

    /**
     * 【模型事件】写入前
     * @param self $model
     * @return bool|null
     */
    public static function onBeforeWrite(self $model): ?bool
    {
        $multiple = (int)$model->multiple;
        if (empty($multiple) || $multiple <= 0) {
            $model->multiple = 1;
        }
        return true;
    }

    /**
     * 【模型事件】写入后
     * @param self $model
     * @return void
     */
    public static function onAfterWrite(self $model): void
    {
        // TODO: Change the autogenerated stub
    }

    /**
     * 【模型事件】恢复前
     * @param self $model
     * @return void
     */
    public static function onBeforeRestore(self $model): void
    {
        // TODO: Change the autogenerated stub
    }

    /**
     * 【模型事件】恢复后
     * @param self $model
     * @return void
     */
    public static function onAfterRestore(self $model): void
    {
        // TODO: Change the autogenerated stub
    }
}
